(load-file "beer-song-test.clj")
(load-file "beer_song_test.clj")
(seq "foo")
(load-file "beer_song_test.clj")
(beer-song/verse 1)
(println beer-song/verse 1)
(println (beer-song/verse 1))
(load-file "beer_song_test.clj")
beer-song-test/song-3-0
(println (beer-song/sing 3))
(println (beer-song-test/song-3-0))
(println beer-song-test/song-3-0)
(println (beer-song/sing 3))
(load-file "beer_song_test.clj")
(println (beer-song/sing 3))
(println beer-song-test/song-3-0)
(load-file "beer_song_test.clj")
(println beer-song-test/song-3-0)
(println (beer-song/sing 3))
(load-file "beer_song_test.clj")
(println (beer-song/sing 3))
(println beer-song-test/song-3-0)
(println (beer-song/sing 3))
(load-file "beer_song_test.clj")
(println beer-song-test/song-3-0)
(println (beer-song/sing 3))
(assert nil)
d-file "beer_song_test.clj")
(load-file "beer_song_test.clj")
(beer-song/assget m k)
(def m {:foo "bar"})
(beer-song/assget m :foo)
(beer-song/assget m :baz)
(load-file "beer_song_test.clj")
(beer-song/assget m :baz)
(println beer-song-test/song-3-0)
(println (beer-song/sing 3))
(load-file "beer_song_test.clj")
(println beer-song-test/song-3-0)
(println (beer-song/sing 3))
(load-file "beer_song_test.clj")
(println beer-song-test/song-3-0)
(println (beer-song/sing 3))
(load-file "beer_song_test.clj")
(clojure.string/split "foo")
(clojure.string/split #"" "foo")
(clojure.string/split "foo" #"")
(load-file "beer_song_test.clj")
