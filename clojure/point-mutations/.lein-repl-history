(interleave "ATCG" (repeat0))
(interleave "ATCG" (repeat 0))
(hash-map *1)
(apply hash-map (interleave "ATCG" (repeat 0)))
(map #(vec % 0) (seq "abc"))
(doc vec)
(map #(vector % 0) (seq "abc"))
(into {} (map #(vector % 0) (seq "abc")))
(into {} (map #(vector % 0) (seq "ATCG")))
{\A 0, \T 0, \C 0, \G 0}
(doc hash-map)
(hash-map (interleave "ATCG" (repeat 0)))
(for [x (seq "ATCG")] [x 0)
(for [x (seq "ATCG")] [x 0])
(into {} (for [x (seq "ATCG")] [x 0]))
(zipmap "ATCG" [0 0 0 0])
(zipmap "ATCG" (repeat 0))
(zipmap "ATCFG" (repeat 0))
(load-file "point_mutations_test.clj")
(zipmap "ACT" "GGA")
(load-file "point_mutations_test.clj")
(zipmap "GGACG" "GGTCG")
(interleave "GGACG" "GGTCG")
(partition 2 (interleave "GGACG" "GGTCG"))
(-> (interleave "GGACG" "GGTCG") (partition 2))
(-> (interleave "GGACG" "GGTCG"))
(->> (interleave "GGACG" "GGTCG") (partition 2))
(->> (interleave "GGACG" "GGTCG") (partition 2) (apply filter =)
)
(->> (interleave "GGACG" "GGTCG") (partition 2) (map =))
(->> (interleave "GGACG" "GGTCG") (partition 2) (apply map =))
(->> (interleave "GGACG" "GGTCG") (partition 2) (filter =))
(->> (interleave "GGACG" "GGTCG") (partition 2) (apply filter =))
(->> (interleave "GGACG" "GGTCG") (partition 2) (apply remove =))
(->> (interleave "GGACG" "GGTCG") (partition 2) (print))
(->> (interleave "GGACG" "GGTCG") (partition 2) (filter not=))
(->> (interleave "GGACG" "GGTCG") (partition 2) )
(->> (interleave "GGACG" "GGTCG") (partition 2))
(remove #(= %1 %2) ((\G \G) (\G \G) (\A \T) (\C \C) (\G \G)))
(remove #(= %1 %2) '((\G \G) (\G \G) (\A \T) (\C \C) (\G \G)))
(remove #(= (first %) (second %)) '((\G \G) (\G \G) (\A \T) (\C \C) (\G \G)))
(->> (interleave "GGACG" "GGTCG") (partition 2) (remove #(= (first %) (second %))))
(->> (interleave "GGACG" "GGTCG") (partition 2) (remove #(= (first %) (second %) (apply reduce +)))
)
(->> (interleave "GGACG" "GGTCG") (partition 2) (remove #(= (first %) (second %) (count))))
(->> (interleave "GGACG" "GGTCG") (partition 2) (remove #(= (first %) (second %))) (count))
(load-file "point_mutations_test.clj")
(require '[clojure.walk :as walk])
walk/walk
(doc walk/walk)
(def data (interleave "GGACG" "GGTCG"))
data
(#(dec (count (set %))) '(2 3))
(#(dec (count (set %))) '(2 2))
(walk/walk #(dec (count (set %))) #(reduce + %) data)
(def data (partition 2 (interleave "GGACG" "GGTCG")))
(walk/walk #(dec (count (set %))) #(reduce + %) data)
(load-file "point_mutations_test.clj")
d-file "point_mutations_test.clj")
(load-file "point_mutations_test.clj")
(def data (partition 2 (interleave "GGACG" "GGTCG")))
(map not= "GGACG" "GGTCG")
(load-file "point_mutations_test.clj")
