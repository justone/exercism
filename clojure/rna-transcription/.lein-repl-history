(load-file "rna_transcription_test.clj")
(seq "ACG")
(map (get {"A" "Z"}) (seq "A"))
(def tr {"G" "C" "C" "G" "T" "A" "A" "U"})
(defn g [] (partial get tr))
(g "A")
(doc get)
g
tr
(get tr "A")
(g "A")
(:arglists (meta #'g))
(g)
(def g (partial get tr))
(g "A")
(map  (seq "A"))
(map ig (seq "A"))
(map g (seq "A"))
(map g "A")
(seq "A")
(def tr {\G \C \C \G \T \A A" "U"})
"
ffff
(def tr {\G \C \C \G \T \A \A \U})
(def g (partial get tr))
(map g "A")
(str (map g "A"))
(str (doseq (map g "A")))
(str (doall (map g "A")))
(map g "ATCGG")
(apply str (map g "ATCGG"))
(into {} "GCCGTAAU")
(into {} (seq "GCCGTAAU"))
(hash-map (seq "GCCGTAAU"))
(apply hash-map (seq "GCCGTAAU"))
(load-file "rna_transcription_test.clj")
(doc assert)
(assert nil)
(load-file "rna_transcription_test.clj")
(g "X")
(map g "XAC")
(doall (map #(assert %) (map g "XAC")))
(load-file "rna_transcription_test.clj")
(doall (map #(assert %) (map g "GAC")))
(map g "XAC")
(doall (map #(assert %) (map g "GAC")))
(doall (map #(assert %) (map g "AC")))
(doall (map #((assert %) %) (map g "AC")))
(doall (map #((assert %) (str %)) (map g "AC")))
(load-file "rna_transcription_test.clj")
