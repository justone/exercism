(load-file "grade_school_test.clj")
(doc assoc-in)
(load-file "grade_school_test.clj")
(assoc-in {} [2] "nate")
(assoc-in {} [2 0] "nate")
(load-file "grade_school_test.clj")
(update-in {2 ["Aimee"]} [2] conj "Nate")
(update-in {} [2] conj "Nate")
(load-file "grade_school_test.clj")
(update-in {} [2] concat ["Nate"])
(update-in {2 ["Aimee"]} [2] concat "Nate")
(update-in {2 ["Aimee"]} [2] concat ["Nate"])
(load-file "grade_school_test.clj")
(-> db (grade-school/add "Jennifer" 4) (grade-school/add "Kareem" 6) (grade-school/add "Christopher" 4) (grade-school/add "Kyle" 3))
(def db {})
(-> db (grade-school/add "Jennifer" 4) (grade-school/add "Kareem" 6) (grade-school/add "Christopher" 4) (grade-school/add "Kyle" 3))
(-> db (grade-school/add "Jennifer" 4) (grade-school/add "Kareem" 6) (grade-school/add "Christopher" 4) (grade-school/add "Kyle" 3) (grade-school/sorted))
(seq (-> db (grade-school/add "Jennifer" 4) (grade-school/add "Kareem" 6) (grade-school/add "Christopher" 4) (grade-school/add "Kyle" 3)))
(apply sorted-map (seq (-> db (grade-school/add "Jennifer" 4) (grade-school/add "Kareem" 6) (grade-school/add "Christopher" 4) (grade-school/add "Kyle" 3))))
(flatten (-> db (grade-school/add "Jennifer" 4) (grade-school/add "Kareem" 6) (grade-school/add "Christopher" 4) (grade-school/add "Kyle" 3)))
(flatten (seq (-> db (grade-school/add "Jennifer" 4) (grade-school/add "Kareem" 6) (grade-school/add "Christopher" 4) (grade-school/add "Kyle" 3))))
(load-file "grade_school_test.clj")
(seq (-> db (grade-school/add "Jennifer" 4) (grade-school/add "Kareem" 6) (grade-school/add "Christopher" 4) (grade-school/add "Kyle" 3)))
(load-file "grade_school_test.clj")
(def newdb (-> db (grade-school/add "Jennifer" 4) (grade-school/add "Kareem" 6) (grade-school/add "Christopher" 4) (grade-school/add "Kyle" 3)))
newdb
(map #(%2) newdb)
(map #(second %) newdb)
(map #(vector (first %) (second %)) newdb)
(into {} (map #(vector (first %) (second %)) newdb))
(into {} (map #(vector (first %) (sort (second %))) newdb))
(into (sorted-map-by <) (map #(vector (first %) (sort (second %))) newdb))
(load-file "grade_school_test.clj")
